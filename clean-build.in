#!/bin/bash

# #############################################
# Helper functions
# #############################################
error() {
    echo "$PROG: $1" >&2
    exit 1
}

info() {
    echo "==> $1"
}

verbose() {
    if [ "$CB_VERBOSE" ]; then
        echo "  * $1" >&2
    fi
}

check_set() {
    while [ "$1" ]; do
        eval CHECK_VAR=\$${1}
        if [ ! "$CHECK_VAR" ]; then
            error "$1 has not been set"
        fi
        shift
    done
}

check_readable() {
    while [ "$1" ]; do
        if [ ! -r "$1" ]; then
            error "File $1 is not readable"
        fi
        shift
    done
}

check_directory() {
    while [ "$1" ]; do
        if [ ! -d "$1" ]; then
            error "could not find directory $1"
        fi
        shift
    done
}

check_file() {
    while [ "$1" ]; do
        if [ ! -f "$1" ]; then
            error "Could not find file $1"
        fi
        check_readable "$1"
        shift
    done
}

check_mounted() {
    while [ "$1" ]; do
	verbose "checking if $1 is mounted"
        ABS_PATH="`cd $1; pwd`"
        if [ "`cat /etc/mtab | awk '{ print $2 }' | grep $ABS_PATH`" ]; then
            error "$1 is already mounted"
        fi
        shift
    done
}

load_file() {
    while [ "$1" ]; do
        check_file "$1"
        verbose "loading $1"
        . "$1"
        shift
    done
}

port_installed() {
    PORT_INSTALLED=`pkginfo -r $CB_CORE_PATH -i | cut -d' ' -f1 | grep "^$1$"`
    echo "$PORT_INSTALLED"
}

# #############################################
# initcore and related functions
# #############################################
parse_initcore_options() {
    while [ "$1" ]; do
        case "$1" in
            -f|--force)
                CB_FORCE_INIT="true" ;;
            *)
                error "unknown action option $1" ;;
        esac
        shift
    done
}

initcore() {
    check_set "CB_CORE_PATH"
    
    if [ -e "$CB_CORE_PATH" -a "$CB_FORCE_INIT" != "true" ]; then
        error "$CB_CORE_PATH exists, use -f to overwrite"
    fi
    info "creating core at $CB_CORE_PATH"
    DB_ROOT="$CB_CORE_PATH/var/lib/pkg/"
    if [ ! -d "$CB_CORE_PATH" ]; then
        verbose "creating directory $CB_CORE_PATH"
        mkdir -p "$CB_CORE_PATH" || error "could not create directory $CB_CORE_PATH"
    fi
    verbose "creating package database"
    if [ ! -d "$DB_ROOT" ]; then
        mkdir -p "$DB_ROOT"
    fi
    if [ -f "$DB_ROOT/db" ]; then
        rm "$DB_ROOT/db"
    fi
    touch "$DB_ROOT/db"
}

# #############################################
# installcore and related functions
# #############################################
parse_installcore_options() {
    while [ "$1" ]; do
        case "$1" in
            -u|--upgrade)
                CB_UPGRADE_PORT="true" ;;
            -f|--force-add)
                CB_FORCE_ADD="true" ;;
	    -s|--skip)
		CB_SKIP="true" ;;
            *)
                error "unknown action option $1" ;;
        esac
        shift
    done
}

installcore() {
    check_set "CB_CORE_PATH" "CB_TOOLCHAIN_PORTS"
    
    info "installing the toolchain"
    INSTALL_PORTS=(${CB_TOOLCHAIN_PORTS[*]})
    addports
    
    info "installing core ports"
    INSTALL_PORTS=()
    for port in $CB_PORT_DIR/*; do
	EXCLUDE=""
	port="`basename $port`"
	# Check if port is in toolchain
	for p in ${CB_TOOLCHAIN_PORTS[*]}; do
	    if [ "$port" == "$p" ]; then
		EXCLUDE=1
		break 1
	    fi
	done
	# If not, check if port is explicitly excluded
        if [ ! "$EXCLUDE" ]; then
	    for p in ${CB_EXCLUDE_PORTS[*]}; do
                if [ "$port" == "$p" ]; then
		    EXCLUDE=1
		    break 1
                fi
	    done
        fi
        # Otherwise port can be installed
        if [ ! "$EXCLUDE" ]; then
	    INSTALL_PORTS=(${INSTALL_PORTS[*]} $port)
        fi
    done
    
    addports
    
    info "core was successfully installed into $CB_CORE_PATH"
}

# #############################################
# addport and related functions
# #############################################
parse_addports_options() {
    ADD_ARGS=()
    while [ "$1" ]; do
        case "$1" in
            -u|--upgrade)
                CB_UPGRADE_PORT="true" ;;
            -f|--force-add)
                CB_FORCE_ADD="true" ;;
	    -s|--skip)
		CB_SKIP="true" ;;
            -*)
                error "unknown action option $1" ;;
            *)
                INSTALL_PORTS=(${INSTALL_PORTS[*]} $1) ;;
        esac
        shift
    done
    
    if [ ${#INSTALL_PORTS[*]} -lt 1 ]; then
        error "addports action requires atleast 1 arguments"
    fi
}
    
addport() {
    if [ ! -f "$CB_PORT_DIR/$1/Pkgfile" ]; then
	info "$1 is not a port, skipping"
	return
    fi

    info "adding port: $1"
    
    verbose "using $CB_PORT_DIR/$1"
    
    PKGADD_FLAGS="-r $CB_CORE_PATH"
    if [ "$CB_FORCE_ADD" == "true" ]; then
        PKGADD_FLAGS="$PKGADD_FLAGS -f"
    fi
    
    verbose "checking if $1 is installed"
    if [ "`port_installed $1`" ]; then
        verbose "CB_UPGRADE_PORT = $CB_UPGRADE_PORT"
	if [ "$CB_SKIP" == "true" ]; then
	    info "$1 is already installed, skipping"
	    return
	fi
        if [ "$CB_UPGRADE_PORT" != "true" ]; then
            error "$1 is already installed, use -u flag or removeport action"
        fi
        PKGADD_FLAGS="$PKGADD_FLAGS -u"
    fi
    verbose "$1 is not installed"
    
    cd $CB_PORT_DIR
    if [ ! -d "$1" ]; then
        error "could not find port $1"
    fi
    cd $1

    load_file "$CB_PKGMK_FILE"
    load_file "Pkgfile"

    TARGET="$name#$version-$release.pkg.tar.gz"
    info "installing package: $TARGET"

    PACKAGE="$PKGMK_PACKAGE_DIR/$TARGET"
    if [ ! -f "$PACKAGE" ]; then
        info "could not find $TARGET, building"
        pkgmk -d
    fi
    
    COMMAND="pkgadd $PKGADD_FLAGS"
    verbose "using command: $COMMAND $PACKAGE"
    
    cd $CB_WORKING_DIR
    $COMMAND $PACKAGE
}

addports() {
    check_set "CB_CORE_PATH" "CB_PORT_DIR" "INSTALL_PORTS"
    check_directory "$CB_CORE_PATH" "$CB_PORT_DIR"
    
    for port in ${INSTALL_PORTS[*]}; do
        addport $port || error "Could not add port $port"
    done
}

# #############################################
# startenv and related functions
# #############################################
parse_startenv_options() {
    return
}

startenv() {
    check_set "CB_CORE_PATH" "CB_OVERLAY_PATH" "CB_MOUNT_PATH"
    check_directory "$CB_CORE_PATH" "$CB_OVERLAY_PATH" "$CB_MOUNT_PATH"
    check_mounted "$CB_MOUNT_PATH"

    unionfs -ocow -oallow_other "$CB_OVERLAY_PATH"=RW:"$CB_CORE_PATH"=RO "$CB_MOUNT_PATH"
    mount --bind /dev "$CB_MOUNT_PATH"/dev
    mount --bind /tmp "$CB_MOUNT_PATH"/tmp
    mount -t proc none "$CB_MOUNT_PATH"/proc
    mount -t sysfs none "$CB_MOUNT_PATH"/sys

    info "Clean chroot envorinment created in $CB_MOUNT_PATH"
}

parse_stopenv_options() {
    return
}

stopenv() {
    check_set "CB_CORE_PATH" "CB_OVERLAY_PATH" "CB_MOUNT_PATH"
    check_directory "$CB_CORE_PATH" "$CB_OVERLAY_PATH" "$CB_MOUNT_PATH"

    umount "$CB_MOUNT_PATH"/tmp
    umount "$CB_MOUNT_PATH"/dev
    umount "$CB_MOUNT_PATH"/proc
    umount "$CB_MOUNT_PATH"/sys
    fusermount -u "$CB_MOUNT_PATH"

    info "Clean build environment had been unmounted"
}


# #############################################
# Options parsing and related functions
# #############################################
print_version() {
    echo "$PROG @@VERSION@@"
}

print_usage() {
    echo "usage: $PROG [options] <action> [action_options]"
    echo "-h or --help for more information"
}

print_help() {
    cat <<EOF
options:
    -cf,--config-file use alternative config file
    -v,--version      display version
    -h,--help         display this message
    
actions:
    initcore, installcore, cleancore, 
EOF
}

parse_options() {
    EXTRA_OPTIONS=()
    
    while [ "$1" ]; do
        case $1 in
            -cf|--config-file)
                if [ ! "$2" ]; then
                    error "$1 requires an argument"
                fi
                CB_CONFIG_FILE="$2"
                shift ;;
            -p|--port-dir)
                if [ ! "$2" ]; then
                    error "$1 requires an argument"
                fi
                CB_PORT_REPO="$2"
                shift ;;
            -pf|--pkgmk-file)
                if [ ! "$2" ]; then
                    error "$1 required an argument"
                fi
                CB_PKGMK_FILE="$2"
                shift ;;
            -r|--root)
                if [ ! "$2" ]; then
                    error "$1 requires an argument"
                fi
                CB_CORE_PATH="$2"
                shift ;;
            -o|--overlay)
                if [ ! "$2" ]; then
                    error "$1 requires an argument"
                fi
                CB_OVERLAY_PATH="$2"
                shift ;;
            -V|--verbose)
                CB_VERBOSE="true" ;;
            -v|--version)
                print_version
                exit 0;;
            -h|--help)
                print_help
                exit 0;;
            *)
                EXTRA_OPTIONS=(${EXTRA_OPTIONS[@]} $1)
                ;;
        esac
        shift
    done
}

parse_action() {
    ACTION=$EXTRA_OPTIONS
    ACTION_OPTIONS=()
    
    for opt in ${EXTRA_OPTIONS[@]}; do
        if [ "$opt" != "$ACTION" ]; then
            ACTION_OPTIONS=(${ACTION_OPTIONS[@]} $opt)
        fi
    done
    
    case $ACTION in
        initcore|installcore|addports|binddirs|startenv|stopenv)
            parse_${ACTION}_options ${ACTION_OPTIONS[@]} ;;
        -*)
            error "unknown option $ACTION" ;;
        *)
            error "unknown action $ACTION" ;;
    esac
}

main() {
    if [ ! "$1" ]; then
        print_usage
        exit 1;
    fi
    
    parse_options "$@"
    load_file "$CB_CONFIG_FILE"
    parse_action
    
    CB_PORT_DIR="$CB_PORT_ROOT"/"$CB_PORT_REPO"

    $ACTION
}

# #############################################
# Initialize some variables
# #############################################
CB_CONFIG_FILE="/usr/etc/cleanbuild.conf"
CB_PORT_ROOT="/usr/ports/"
CB_PORT_REPO="core"
CB_TOOLCHAIN_PORTS=(filesystem binutils glibc gcc)
CB_FORCE_INIT="false"
CB_PKGMK_FILE="/etc/pkgmk.conf"
CB_UPGRADE_PORT="false"
CB_FORCE_ADD="false"
CB_SKIP="false"

# #############################################
# Start the program
# #############################################
PROG="`basename $0`"
CB_WORKING_DIR="`pwd`"
main "$@"

# End of file
