#!/bin/bash

# #############################################
# Helper functions
# #############################################
error() {
    echo "ERROR: $1" >&2
    exit 1
}

info() {
    echo "==> $1"
}

verbose() {
    if [ "$CB_VERBOSE" ]; then
        echo "  * $1" >&2
    fi
}

load_file() {
    if [ "$1" ]; then
        if [ ! -f "$1" ]; then
            error "could not find file $1"
        fi
        verbose "loading $1"
        . "$1"
    fi
}

# #############################################
# Actions and related functions
# #############################################
check_core_path_set() {
    if [ ! "$CB_CORE_PATH" ]; then
        error "core path has not been set"
    fi
}

port_installed() {
    PORT_INSTALLED=`pkginfo -r $CB_CORE_PATH -i | cut -d' ' -f1 | grep "^$1$"`
    echo "$PORT_INSTALLED"
}

# #############################################
# initcore and related functions
# #############################################
parse_initcore_options() {
    while [ "$1" ]; do
        case "$1" in
            -f|--force)
                CB_FORCE_INIT="true" ;;
            *)
                error "unknown action option $1" ;;
        esac
        shift
    done
}

initcore() {
    check_core_path_set
    if [ -e "$CB_CORE_PATH" -a "$CB_FORCE_INIT" == "false" ]; then
        error "$CB_CORE_PATH exists, use -f to overwrite"
    fi
    info "creating core at $CB_CORE_PATH"
    DB_ROOT="$CB_CORE_PATH/var/lib/pkg/"
    if [ ! -d "$CB_CORE_PATH" ]; then
        verbose "creating directory $CB_CORE_PATH"
        mkdir -p "$CB_CORE_PATH" || error "could not create directory $CB_CORE_PATH"
    fi
    verbose "creating package database"
    if [ ! -d "$DB_ROOT" ]; then
        mkdir -p "$DB_ROOT"
    fi
    if [ ! -f "$DB_ROOT/db" ]; then
        touch "$DB_ROOT/db"
    fi
    echo "Core path initialized, use installcore action to add core ports"
}

# #############################################
# installcore and related functions
# #############################################
parse_installcore_options() {
    while [ "$1" ]; do
        case "$1" in
            -u|--upgrade)
                CB_UPGRADE_PORT="true" ;;
            -f|--force-add)
                CB_FORCE_ADD="true" ;;
            *)
                error "unknown action option $1" ;;
        esac
        shift
    done
}

installcore() {
    check_core_path_set
    
    PKGADD_FLAGS="-r $PWD/$CB_CORE_PATH"
    if [ "$CB_FORCE_ADD" == "true" ]; then
        PKGADD_FLAGS="$PKGADD_FLAGS -f"
    fi
    
    info "installing toolchain"
    INSTALL_PORTS=(${CB_TOOLCHAIN_PORTS[*]})
    addports
}

# #############################################
# addport and related functions
# #############################################
parse_addports_options() {
    ADD_ARGS=()
    while [ "$1" ]; do
        case "$1" in
            -*)
                error "unknown action option $1" ;;
            *)
                INSTALL_PORTS=(${INSTALL_PORTS[*]} $1) ;;
        esac
        shift
    done
    
    if [ ${#INSTALL_PORTS[*]} -lt 1 ]; then
        error "addports action requires atleast 1 arguments"
    fi
}
    
addport() {
    verbose "using $CB_PORT_DIR/$1"
    
    PKGADD_FLAGS="-r $CB_CORE_PATH"
    
    verbose "checking if $1 is installed"
    if [ "`port_installed $1`" ]; then
        if [ "$CB_UPGRAGE_PORT" != "true" ]; then
            error "$1 is already installed, use -u flag or removeport action"
        fi
        PKGADD_FLAGS="$PKGADD_FLAGS -u"
    fi
    verbose "$1 is not installed"
    
    cd $CB_PORT_DIR
    if [ ! -d "$1" ]; then
        error "could not find port $1"
    fi
    cd $1

    load_file "$CB_PKGMK_FILE"
    load_file "Pkgfile"

    TARGET="$name#$version-$release.pkg.tar.gz"
    info "installing $TARGET"

    PACKAGE="$PKGMK_PACKAGE_DIR/$TARGET"
    if [ ! -f "$PACKAGE" ]; then
        info "could not find $TARGET, building"
        pkgmk -d
    fi
    
    COMMAND="pkgadd $PKGADD_FLAGS"
    verbose "using command: $COMMAND"

    verbose "package: $PACKAGE"
    
    cd $CB_WORKING_DIR
    $COMMAND $PACKAGE
}

addports() {
    if [ ! "$CB_PORT_DIR" ]; then
        error "port directory is not defined"
    fi
    if [ ! -d "$CB_PORT_DIR" ]; then
        error "could not find directory $CB_PORT_DIR"
    fi
    if [ ! "$INSTALL_PORTS" ]; then
        error "no ports selected to be installed"
    fi
    
    for port in ${INSTALL_PORTS[*]}; do
        addport $port
    done
}

# #############################################
# cleancore and related functions
# #############################################
parse_cleancore_options() {
    while [ "$1" ]; do
        case "$1" in
            *)
                error "unknown action option $1" ;;
        esac
        shift
    done
}

cleancore() {
    check_core_path_set
    for port in $CB_PORT_DIR/*; do
        if [ "`port_installed $port`" ]; then
            pkgrm -r "$CB_CORE_PATH" $port
        fi
    done
}

# #############################################
# Options parsing and related functions
# #############################################
print_version() {
    echo "$PROG @@VERSION@@"
}

print_usage() {
    echo "usage: $PROG [options] <action> [action_options]"
    echo "-h or --help for more information"
}

print_help() {
    cat <<EOF
options:
    -v,--version   display version
    -h,--help       display this message
    
actions:
EOF
}

parse_options() {
    EXTRA_OPTIONS=()
    
    while [ "$1" ]; do
        case $1 in
            -cf|--config-file)
                if [ ! "$2" ]; then
                    error "$1 requires an argument"
                fi
                CB_CONFIG_FILE="$2"
                shift ;;
            -p|--portdir)
                if [ ! "$2" ]; then
                    error "$1 requires an argument"
                fi
                CB_PORT_DIR="$2"
                shift ;;
            -pf|--pkgmk-file)
                if [ ! "$2" ]; then
                    error "$1 required an argument"
                fi
                CB_PKGMK_FILE="$2"
                shift ;;
            -r|--root)
                if [ ! "$2" ]; then
                    error "$1 requires an argument"
                fi
                CB_CORE_PATH="$2"
                shift ;;
            -V|--verbose)
                CB_VERBOSE="true" ;;
            -v|--version)
                print_version
                exit 0;;
            -h|--help)
                print_help
                exit 0;;
            *)
                EXTRA_OPTIONS=(${EXTRA_OPTIONS[@]} $1)
                ;;
        esac
        shift
    done
}

parse_action() {
    ACTION=$EXTRA_OPTIONS
    ACTION_OPTIONS=()
    
    for opt in ${EXTRA_OPTIONS[@]}; do
        if [ "$opt" != "$ACTION" ]; then
            ACTION_OPTIONS=(${ACTION_OPTIONS[@]} $opt)
        fi
    done
    
    case $ACTION in
        initcore|installcore|cleancore|addports)
            parse_${ACTION}_options ${ACTION_OPTIONS[@]} ;;
        -*)
            error "unknown option $ACTION" ;;
        *)
            error "unknown action $ACTION" ;;
    esac
}

main() {
    if [ ! "$1" ]; then
        print_usage
        exit 1;
    fi
    
    parse_options "$@"
    load_file "$CB_CONFIG_FILE"
    parse_action
    
    $ACTION
}

# #############################################
# Initialize some variables
# #############################################
CB_PORT_DIR="/usr/ports/core"
CB_TOOLCHAIN_PORTS=(filesystem binutils glibc gcc)

CB_FORCE_INIT="false"

CB_PKGMK_FILE="/etc/pkgmk.conf"
CB_UPGRADE_PORT="false"
CB_FORCE_ADD="false"

# #############################################
# Start the program
# #############################################
PROG="`basename $0`"
CB_WORKING_DIR="`pwd`"
main "$@"

# End of file
